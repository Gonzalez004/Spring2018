#include <stdio.h>
#include <iostream>
#include <allegro5/allegro.h>
#include <allegro5\allegro_image.h>
#include <allegro5/allegro_primitives.h>

using namespace std;
const float FPS = 60;
const int SCREEN_W = 640;
const int SCREEN_H = 300;
const int BOUNCER_SIZE = 32;
enum MYKEYS {
	KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT
};
int map[10][10] = {
	0,0,0,0,0,0,0,0,0,0,
	0,0,1,1,1,0,0,1,1,1,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,1,1,1,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,1,1,1,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,1,1,1,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
};
int collide(int x, int y, int map[10][10]);

int main()
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_TIMER *timer = NULL;
	ALLEGRO_BITMAP *bouncer = NULL;
	ALLEGRO_BITMAP *background = NULL;

	float bouncer_x =50;
	float bouncer_y = 50;
	bool key[4] = { false, false, false, false };
	bool redraw = true;
	bool doexit = false;
	int worldwidth = 2600;
	int worldheight = 390;
	int camerax = 0;
	int cameray = 0;
	float dx = 0;
	float dy = 0;
	


	bool mayJumpAgain = false;
	bool isOnSolidGround = false;


	al_init();
	al_install_keyboard();
	al_init_image_addon();
	al_init_primitives_addon();

	timer = al_create_timer(1.0 / FPS);

	display = al_create_display(SCREEN_W, SCREEN_H);

	bouncer = al_create_bitmap(BOUNCER_SIZE, BOUNCER_SIZE);
	al_set_target_bitmap(bouncer);
	al_clear_to_color(al_map_rgb(255, 0, 255));

	background = al_load_bitmap("LongPhoto.png");

	al_set_target_bitmap(al_get_backbuffer(display));

	event_queue = al_create_event_queue();

	al_register_event_source(event_queue, al_get_display_event_source(display));
	al_register_event_source(event_queue, al_get_timer_event_source(timer));
	al_register_event_source(event_queue, al_get_keyboard_event_source());

	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();

	al_start_timer(timer);

	while (!doexit)
	{
		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);
		if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[KEY_UP] = true;
				break;

			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = true;
				break;

			case ALLEGRO_KEY_LEFT:
				key[KEY_LEFT] = true;
				break;

			case ALLEGRO_KEY_RIGHT:
				key[KEY_RIGHT] = true;
				break;
			}
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[KEY_UP] = false;
				break;

			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = false;
				break;

			case ALLEGRO_KEY_LEFT:
				key[KEY_LEFT] = false;
				break;

			case ALLEGRO_KEY_RIGHT:
				key[KEY_RIGHT] = false;
				break;

			case ALLEGRO_KEY_ESCAPE:
				doexit = true;
				break;
			}
		}
		else if (ev.type == ALLEGRO_EVENT_TIMER) {

			if (bouncer_y + BOUNCER_SIZE > SCREEN_H) {
				bouncer_y = SCREEN_H - BOUNCER_SIZE;
				isOnSolidGround = true;
				dy = 0;
			}

			else {
				isOnSolidGround = false;

			}
			if (collide(bouncer_x, bouncer_y, map) == 1) {
				isOnSolidGround = true;
				dy = 0;
			}


			//here's my check to stop my square from walking off the window (left, right, and top sides)
			if (bouncer_x >	SCREEN_W - BOUNCER_SIZE)
				bouncer_x = SCREEN_W - BOUNCER_SIZE;
			if (bouncer_x < 0)
				bouncer_x = 0;
			if (bouncer_y < 0)
				bouncer_y = 0;



			if (key[KEY_UP] && mayJumpAgain == true && isOnSolidGround == true) {
				dy -= 20.0;
				mayJumpAgain = false;
			}
			else {
				mayJumpAgain = true;
			}


			if (key[KEY_LEFT]) {
				bouncer_x -= 4.0;
			}

			if (key[KEY_RIGHT]) {
				bouncer_x += 4.0;
			}
			;
			if (isOnSolidGround == false) {
				dy++;
			}
			//ADD CODE: if your y velocity goes higher than 8, reset it to 8.
			if (dy > 10) {
				dy = 10;
			}
		camerax = bouncer_x - SCREEN_W / 2;

			if (camerax < 0)
				camerax = 0;
			if (cameray < 0)
				cameray = 0;
			if (camerax > worldwidth - SCREEN_W)
				camerax = worldwidth - SCREEN_W;
			if (cameray > worldheight - SCREEN_H)
				cameray = worldheight - SCREEN_H;

			
		bouncer_x += dx;
		bouncer_y += dy;
		redraw = true;
		}


		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}

		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;

			al_clear_to_color(al_map_rgb(0, 0, 0));
			al_draw_bitmap_region(background, camerax, cameray, SCREEN_W, SCREEN_H, 0, 0, 0);
			al_draw_bitmap(bouncer, bouncer_x - camerax, bouncer_y, 0);

			for (int i = 0; i < 10; i++) {
				for (int j = 0; j < 10; j++) {
					//you get the 50 by the size of the screen (500), divide by the matrix (10by10)
					al_draw_rectangle(i * 50, j * 50, i * 50 + 50, j * 50 + 50, al_map_rgb(50, 80, 90), 3);
					if (map[i][j] == 1)//platforms
						al_draw_filled_rectangle(j * 50, i * 50, j * 50 + 50, i * 50 + 50, al_map_rgb(80, 220, 120));

				}
			}

			al_flip_display();
		}
	}

	al_destroy_bitmap(bouncer);
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);

	return 0;
}
int collide(int x, int y, int map[10][10]) {
	//cout << "checkign map slot " << (x + 30 + 5 + offset) / 30 << " , " << (y + 30) / 30 << endl;



	//check for platform collision
	if (
		//check bottom right corner
		(map[(y + BOUNCER_SIZE) / 50][(x + BOUNCER_SIZE) / 50] == 1)

		//check bottom left corner
		|| (map[(y + BOUNCER_SIZE) / 50][(x) / 50] == 1)) {
		cout << "platform collision.";
		return 1;
	}
	else
		return 0;


}
