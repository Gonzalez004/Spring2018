#include <iostream>
#include <allegro5/allegro.h>
#include <allegro5\allegro_image.h>
#include <allegro5\allegro_audio.h>
#include <allegro5\allegro_acodec.h>

using namespace std;

int Screen_H = 480;
int Screen_W = 640;

enum directions { Up, Down, Left, Right };

int main() {

	al_init();
	al_init_image_addon();
	al_init_acodec_addon();
	al_install_audio();
	al_install_keyboard();

	ALLEGRO_DISPLAY *GameWindow = NULL;
	ALLEGRO_EVENT_QUEUE *Event_Queue = NULL;
	ALLEGRO_BITMAP *SaxPhoto = NULL;
	ALLEGRO_BITMAP *OfficPhoto = NULL;
	ALLEGRO_BITMAP *OneDuckPhoto = NULL;
	ALLEGRO_BITMAP *DuckkyPhoto = NULL;
	ALLEGRO_SAMPLE *Song1 = NULL;
	ALLEGRO_SAMPLE *Song2 = NULL;
	ALLEGRO_SAMPLE *Song3 = NULL;
	ALLEGRO_SAMPLE *Song4 = NULL;
	ALLEGRO_SAMPLE_INSTANCE *SongInstance = NULL;

bool Redraw = true;
	bool key[4] = { false, false, false, false };

	GameWindow = al_create_display(Screen_W, Screen_H);


	al_reserve_samples(4);
	Song1 = al_load_sample("100Ducks.wav");
	Song2 = al_load_sample("Office.wav");
	Song3 = al_load_sample("Duck.wav");
	Song4 = al_load_sample("Sax.wav");

	SaxPhoto = al_load_bitmap("SaxMan.jpg");
	OfficPhoto = NULL;
	OneDuckPhoto = NULL;
	DuckkyPhoto = NULL;

	al_set_target_bitmap(SaxPhoto);
	al_set_target_bitmap(OfficPhoto);
	al_set_target_bitmap(OneDuckPhoto);
	al_set_target_bitmap(DuckkyPhoto);

	al_set_target_bitmap(al_get_backbuffer(GameWindow));

	Event_Queue = al_create_event_queue();

	al_register_event_source(Event_Queue, al_get_display_event_source(GameWindow));
	al_register_event_source(Event_Queue, al_get_keyboard_event_source());

	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();


	while (true) {
		ALLEGRO_EVENT ev;
		al_wait_for_event(Event_Queue, &ev);

		if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			//"keycode" holds all the different keys on the keyboard
			switch (ev.keyboard.keycode) {
				//if the Up key has been pressed
			case ALLEGRO_KEY_UP:
				key[0] = true;
				break;
				//if the Down key has been pressed
			case ALLEGRO_KEY_DOWN:
				key[1] = true;
				break;
				//if the Left key has been pressed
			case ALLEGRO_KEY_LEFT:
				key[2] = true;
				break;
				//if the Right key has been pressed
			case ALLEGRO_KEY_RIGHT:
				key[3] = true;
				break;
			}
		}
		//has something been released on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[0] = false;
				break;
			case ALLEGRO_KEY_DOWN:
				key[1] = false;
				break;
			case ALLEGRO_KEY_LEFT:
				key[2] = false;
				break;
			case ALLEGRO_KEY_RIGHT:
				key[3] = false;
				break;
				//kill the program if someone presses escape
			case ALLEGRO_KEY_ESCAPE:
				return 0;
				break;
			}
		}
		//render section: draws stuff
		//if you were supposed to redraw but there wasn't an event, don't redraw
		if (Redraw && al_is_event_queue_empty(Event_Queue)) {

			Redraw = false;

			al_clear_to_color(al_map_rgb(0, 0, 0));

			if (key[Up]) {
				al_play_sample(Song1, 1, 0, 1, ALLEGRO_PLAYMODE_LOOP, NULL);
				cout << "Track 1" << endl;
			}
			if (key[Down]) {
				al_play_sample(Song2, 1, 0, 1, ALLEGRO_PLAYMODE_LOOP, NULL);
				cout << "Track 2" << endl;
			}
			if (key[Left]) {
				al_play_sample(Song3, 1, 0, 1, ALLEGRO_PLAYMODE_LOOP, NULL);
				cout << "Track 3" << endl;
			}
			if (key[Right]) {

				al_play_sample(Song4, 1, 0, .5, ALLEGRO_PLAYMODE_LOOP, NULL);
				al_draw_bitmap(SaxPhoto, 80, 50, 0);
				cout << "Track 4" << endl;
			}

			al_flip_display();

		}
		return 0;
	}
	al_destroy_bitmap(SaxPhoto);
	al_destroy_bitmap(OfficPhoto);
	al_destroy_bitmap(OneDuckPhoto);
	al_destroy_bitmap(DuckkyPhoto);
	al_destroy_display(GameWindow);
	al_destroy_sample(Song1);
	al_destroy_sample(Song2);
	al_destroy_sample(Song3);
	al_destroy_sample(Song4);
	al_destroy_event_queue(Event_Queue);

}
